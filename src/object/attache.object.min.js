// The author disclaims copyright to this code.

(function(){function assertType(fn,typename){if(!(typeof fn===typename)){throw new TypeError(fn+" is not a "+typename);}}
function sxlice(obj,keys,destructive){assertType(obj,"object");if(!(keys instanceof Array)){throw new TypeError("keys is not an array.");}
var ret={};var length=keys.length;for(var i=0;i<length;i++){var key=keys[i];if(key in obj){ret[key]=obj[key];if(destructive)delete obj[key];}}
return ret;}
var algorithms={forEach:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];for(var key in obj){fn.call(scope,obj[key],key,obj);}},keyOf:function(obj,value){assertType(obj,"object");for(var key in obj){if(obj[key]===value)return key;}},every:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];for(var key in obj){if(!fn.call(scope,obj[key],key,obj)){return false;}}
return true;},some:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];for(var key in obj){if(fn.call(scope,obj[key],key,obj)){return true;}}
return false;},filter:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];var ret={};for(var key in obj){if(fn.call(scope,obj[key],key,obj)){ret[key]=obj[key];}}
return ret;},reduce:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var needFirst=true;var acc;if(arguments.length>2){needFirst=false;acc=arguments[2];}
for(var key in obj){if(needFirst){acc=obj[key];needFirst=false;}else{acc=fn(acc,obj[key],key,obj);}}
if(needFirst){throw new TypeError("Can't find an element to initialize the accumulator.");}
return acc;},map:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];var ret={};for(var key in obj){ret[key]=fn.call(scope,obj[key],key,obj);}
return ret;},mapToArray:function(obj,fn){assertType(obj,"object");assertType(fn,"function");var scope=arguments[2];var ret=[];for(var key in obj){ret.push(fn.call(scope,obj[key],key,obj));}
return ret;},pop:function(obj,key){assertType(obj,"object");if(key in obj){var ret=obj[key];delete obj[key];return ret;}else{return arguments[2];}},length:function(obj){assertType(obj,"object");var length=0;for(var key in obj)length++;return length;},empty:function(obj){assertType(obj,"object");for(var key in obj)return false;return true;},concat:function(){var ret={};var len=arguments.length;for(var i=0;i<len;i++){var obj=arguments[i];if(obj){for(var key in obj){ret[key]=obj[key];}}}
return ret;},slice:function(obj,keys){return sxlice(obj,keys,false);},splice:function(obj,keys){return sxlice(obj,keys,true);},keys:function(obj){return algorithms.mapToArray(obj,function(v,k){return k;});},values:function(obj){return algorithms.mapToArray(obj,function(v){return v;});},pairs:function(obj){return algorithms.mapToArray(obj,function(v,k){return[k,v];});},copy:function(obj){assertType(obj,"object");var ret={};for(var key in obj)ret[key]=obj[key];return ret;}};attache=window.attache||{};attache.object=algorithms;})();
